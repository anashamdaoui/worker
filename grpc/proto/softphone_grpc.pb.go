// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: grpc/proto/softphone.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SoftPhoneService_RegisterPhone_FullMethodName   = "/softphone.SoftPhoneService/RegisterPhone"
	SoftPhoneService_ListPhones_FullMethodName      = "/softphone.SoftPhoneService/ListPhones"
	SoftPhoneService_Call_FullMethodName            = "/softphone.SoftPhoneService/Call"
	SoftPhoneService_AnswerCall_FullMethodName      = "/softphone.SoftPhoneService/AnswerCall"
	SoftPhoneService_HangupCall_FullMethodName      = "/softphone.SoftPhoneService/HangupCall"
	SoftPhoneService_HoldCall_FullMethodName        = "/softphone.SoftPhoneService/HoldCall"
	SoftPhoneService_ResumeCall_FullMethodName      = "/softphone.SoftPhoneService/ResumeCall"
	SoftPhoneService_UnregisterPhone_FullMethodName = "/softphone.SoftPhoneService/UnregisterPhone"
)

// SoftPhoneServiceClient is the client API for SoftPhoneService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The softphone control service definition.
type SoftPhoneServiceClient interface {
	// Registers a phone to the platform
	RegisterPhone(ctx context.Context, in *RegisterPhoneRequest, opts ...grpc.CallOption) (*RegisterPhoneResponse, error)
	// Lists all registered phones based on filter criteria
	ListPhones(ctx context.Context, in *ListPhonesRequest, opts ...grpc.CallOption) (*PhoneListResponse, error)
	// Initiates a call from a registered phone
	Call(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*ActionResponse, error)
	// Answers an incoming call
	AnswerCall(ctx context.Context, in *CallActionRequest, opts ...grpc.CallOption) (*ActionResponse, error)
	// Hangs up an active or incoming call
	HangupCall(ctx context.Context, in *CallActionRequest, opts ...grpc.CallOption) (*ActionResponse, error)
	// Puts an active call on hold
	HoldCall(ctx context.Context, in *CallActionRequest, opts ...grpc.CallOption) (*ActionResponse, error)
	// Resumes a call that was put on hold
	ResumeCall(ctx context.Context, in *CallActionRequest, opts ...grpc.CallOption) (*ActionResponse, error)
	// Unregisters a phone from the platform
	UnregisterPhone(ctx context.Context, in *UnregisterPhoneRequest, opts ...grpc.CallOption) (*ActionResponse, error)
}

type softPhoneServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSoftPhoneServiceClient(cc grpc.ClientConnInterface) SoftPhoneServiceClient {
	return &softPhoneServiceClient{cc}
}

func (c *softPhoneServiceClient) RegisterPhone(ctx context.Context, in *RegisterPhoneRequest, opts ...grpc.CallOption) (*RegisterPhoneResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterPhoneResponse)
	err := c.cc.Invoke(ctx, SoftPhoneService_RegisterPhone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *softPhoneServiceClient) ListPhones(ctx context.Context, in *ListPhonesRequest, opts ...grpc.CallOption) (*PhoneListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PhoneListResponse)
	err := c.cc.Invoke(ctx, SoftPhoneService_ListPhones_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *softPhoneServiceClient) Call(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*ActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, SoftPhoneService_Call_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *softPhoneServiceClient) AnswerCall(ctx context.Context, in *CallActionRequest, opts ...grpc.CallOption) (*ActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, SoftPhoneService_AnswerCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *softPhoneServiceClient) HangupCall(ctx context.Context, in *CallActionRequest, opts ...grpc.CallOption) (*ActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, SoftPhoneService_HangupCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *softPhoneServiceClient) HoldCall(ctx context.Context, in *CallActionRequest, opts ...grpc.CallOption) (*ActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, SoftPhoneService_HoldCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *softPhoneServiceClient) ResumeCall(ctx context.Context, in *CallActionRequest, opts ...grpc.CallOption) (*ActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, SoftPhoneService_ResumeCall_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *softPhoneServiceClient) UnregisterPhone(ctx context.Context, in *UnregisterPhoneRequest, opts ...grpc.CallOption) (*ActionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActionResponse)
	err := c.cc.Invoke(ctx, SoftPhoneService_UnregisterPhone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SoftPhoneServiceServer is the server API for SoftPhoneService service.
// All implementations must embed UnimplementedSoftPhoneServiceServer
// for forward compatibility
//
// The softphone control service definition.
type SoftPhoneServiceServer interface {
	// Registers a phone to the platform
	RegisterPhone(context.Context, *RegisterPhoneRequest) (*RegisterPhoneResponse, error)
	// Lists all registered phones based on filter criteria
	ListPhones(context.Context, *ListPhonesRequest) (*PhoneListResponse, error)
	// Initiates a call from a registered phone
	Call(context.Context, *CallRequest) (*ActionResponse, error)
	// Answers an incoming call
	AnswerCall(context.Context, *CallActionRequest) (*ActionResponse, error)
	// Hangs up an active or incoming call
	HangupCall(context.Context, *CallActionRequest) (*ActionResponse, error)
	// Puts an active call on hold
	HoldCall(context.Context, *CallActionRequest) (*ActionResponse, error)
	// Resumes a call that was put on hold
	ResumeCall(context.Context, *CallActionRequest) (*ActionResponse, error)
	// Unregisters a phone from the platform
	UnregisterPhone(context.Context, *UnregisterPhoneRequest) (*ActionResponse, error)
	mustEmbedUnimplementedSoftPhoneServiceServer()
}

// UnimplementedSoftPhoneServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSoftPhoneServiceServer struct {
}

func (UnimplementedSoftPhoneServiceServer) RegisterPhone(context.Context, *RegisterPhoneRequest) (*RegisterPhoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterPhone not implemented")
}
func (UnimplementedSoftPhoneServiceServer) ListPhones(context.Context, *ListPhonesRequest) (*PhoneListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPhones not implemented")
}
func (UnimplementedSoftPhoneServiceServer) Call(context.Context, *CallRequest) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (UnimplementedSoftPhoneServiceServer) AnswerCall(context.Context, *CallActionRequest) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnswerCall not implemented")
}
func (UnimplementedSoftPhoneServiceServer) HangupCall(context.Context, *CallActionRequest) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HangupCall not implemented")
}
func (UnimplementedSoftPhoneServiceServer) HoldCall(context.Context, *CallActionRequest) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HoldCall not implemented")
}
func (UnimplementedSoftPhoneServiceServer) ResumeCall(context.Context, *CallActionRequest) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeCall not implemented")
}
func (UnimplementedSoftPhoneServiceServer) UnregisterPhone(context.Context, *UnregisterPhoneRequest) (*ActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterPhone not implemented")
}
func (UnimplementedSoftPhoneServiceServer) mustEmbedUnimplementedSoftPhoneServiceServer() {}

// UnsafeSoftPhoneServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SoftPhoneServiceServer will
// result in compilation errors.
type UnsafeSoftPhoneServiceServer interface {
	mustEmbedUnimplementedSoftPhoneServiceServer()
}

func RegisterSoftPhoneServiceServer(s grpc.ServiceRegistrar, srv SoftPhoneServiceServer) {
	s.RegisterService(&SoftPhoneService_ServiceDesc, srv)
}

func _SoftPhoneService_RegisterPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoftPhoneServiceServer).RegisterPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SoftPhoneService_RegisterPhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoftPhoneServiceServer).RegisterPhone(ctx, req.(*RegisterPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SoftPhoneService_ListPhones_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPhonesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoftPhoneServiceServer).ListPhones(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SoftPhoneService_ListPhones_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoftPhoneServiceServer).ListPhones(ctx, req.(*ListPhonesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SoftPhoneService_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoftPhoneServiceServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SoftPhoneService_Call_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoftPhoneServiceServer).Call(ctx, req.(*CallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SoftPhoneService_AnswerCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoftPhoneServiceServer).AnswerCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SoftPhoneService_AnswerCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoftPhoneServiceServer).AnswerCall(ctx, req.(*CallActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SoftPhoneService_HangupCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoftPhoneServiceServer).HangupCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SoftPhoneService_HangupCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoftPhoneServiceServer).HangupCall(ctx, req.(*CallActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SoftPhoneService_HoldCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoftPhoneServiceServer).HoldCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SoftPhoneService_HoldCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoftPhoneServiceServer).HoldCall(ctx, req.(*CallActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SoftPhoneService_ResumeCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoftPhoneServiceServer).ResumeCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SoftPhoneService_ResumeCall_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoftPhoneServiceServer).ResumeCall(ctx, req.(*CallActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SoftPhoneService_UnregisterPhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterPhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SoftPhoneServiceServer).UnregisterPhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SoftPhoneService_UnregisterPhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SoftPhoneServiceServer).UnregisterPhone(ctx, req.(*UnregisterPhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SoftPhoneService_ServiceDesc is the grpc.ServiceDesc for SoftPhoneService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SoftPhoneService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "softphone.SoftPhoneService",
	HandlerType: (*SoftPhoneServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterPhone",
			Handler:    _SoftPhoneService_RegisterPhone_Handler,
		},
		{
			MethodName: "ListPhones",
			Handler:    _SoftPhoneService_ListPhones_Handler,
		},
		{
			MethodName: "Call",
			Handler:    _SoftPhoneService_Call_Handler,
		},
		{
			MethodName: "AnswerCall",
			Handler:    _SoftPhoneService_AnswerCall_Handler,
		},
		{
			MethodName: "HangupCall",
			Handler:    _SoftPhoneService_HangupCall_Handler,
		},
		{
			MethodName: "HoldCall",
			Handler:    _SoftPhoneService_HoldCall_Handler,
		},
		{
			MethodName: "ResumeCall",
			Handler:    _SoftPhoneService_ResumeCall_Handler,
		},
		{
			MethodName: "UnregisterPhone",
			Handler:    _SoftPhoneService_UnregisterPhone_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/proto/softphone.proto",
}
